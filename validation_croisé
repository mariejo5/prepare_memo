from sklearn.model_selection import cross_val_score

# Liste des modèles
models = {
    'Régression Logistique': LogisticRegression(),
    'Arbre de Décision': DecisionTreeClassifier(),
    'Forêt Aléatoire': RandomForestClassifier(),
    'Gradient Boosting': GradientBoostingClassifier()
}

results = []
cv_folds = 5  # Nombre de plis de la validation croisée

# Entraîner et évaluer chaque modèle
for name, model in models.items():
    # Validation croisée sur les données d'entraînement
    cv_scores = cross_val_score(model, X_train, y_train, cv=cv_folds, scoring='accuracy')
    mean_cv_accuracy = cv_scores.mean()
    
    # Entraînement sur l'ensemble d'entraînement
    model.fit(X_train, y_train)
    
    # Prédictions
    y_train_pred = model.predict(X_train)
    y_test_pred = model.predict(X_test)
    
    # Évaluation sur les données d'entraînement
    train_report = classification_report(y_train, y_train_pred, output_dict=True)
    train_accuracy = accuracy_score(y_train, y_train_pred)
    
    # Évaluation sur les données de test
    test_report = classification_report(y_test, y_test_pred, output_dict=True)
    test_accuracy = accuracy_score(y_test, y_test_pred)
    
    # Stocker les résultats
    results.append({
        'Modèle': name,
        'Train Precision': train_report['1']['precision'],
        'Train Recall': train_report['1']['recall'],
        'Train F1-Score': train_report['1']['f1-score'],
        'Train Accuracy': train_accuracy,
        'Test Precision': test_report['1']['precision'],
        'Test Recall': test_report['1']['recall'],
        'Test F1-Score': test_report['1']['f1-score'],
        'Test Accuracy': test_accuracy,
        'Mean CV Accuracy': mean_cv_accuracy
    })

# Convertir les résultats en DataFrame
results_df = pd.DataFrame(results)

# Afficher les résultats
print("Résultats des modèles :")
print(results_df)
