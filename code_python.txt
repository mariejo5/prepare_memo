import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier, AdaBoostClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, precision_score, recall_score, f1_score, roc_auc_score, roc_curve
import matplotlib.pyplot as plt

# Sélection des caractéristiques et de la variable cible
X = df[['balance', 'income', 'credit_flows', 'debit_flows', 'transaction_amount']]
y = df['has_product']

# Séparation des données en ensemble d'entraînement (70%) et de test (30%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Standardisation des données
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Définir les modèles à entraîner
models = {
    'Gradient Boosting': GradientBoostingClassifier(),
    'Random Forest': RandomForestClassifier(),
    'Decision Tree': DecisionTreeClassifier(),
    'K-Nearest Neighbors': KNeighborsClassifier(),
    'AdaBoost': AdaBoostClassifier()
}

# Entraîner et évaluer chaque modèle
for name, model in models.items():
    print(f"Entraînement du modèle : {name}")
    model.fit(X_train_scaled, y_train)  # Entraîner le modèle
    y_pred = model.predict(X_test_scaled)  # Prédictions sur le jeu de test
    y_prob = model.predict_proba(X_test_scaled)[:, 1]  # Probabilités pour la classe 1 (pour ROC-AUC)

    # Évaluation des performances
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_prob)
    conf_matrix = confusion_matrix(y_test, y_pred)
    class_report = classification_report(y_test, y_pred)
    
    print(f"\n{name} - Accuracy: {accuracy:.2f}")
    print(f"Précision: {precision:.2f}")
    print(f"Rappel: {recall:.2f}")
    print(f"F1-Score: {f1:.2f}")
    print(f"AUC-ROC: {roc_auc:.2f}")
    print(f"Matrice de confusion:\n{conf_matrix}")
    print(f"Rapport de classification:\n{class_report}")
    print("\n" + "="*60 + "\n")
    
    # Courbe ROC
    fpr, tpr, _ = roc_curve(y_test, y_prob)
    plt.plot(fpr, tpr, label=f'{name} (AUC = {roc_auc:.2f})')

# Afficher la courbe ROC pour tous les modèles
plt.plot([0, 1], [0, 1], 'k--')  # Courbe ROC d'une classification aléatoire
plt.xlabel('Taux de faux positifs')
plt.ylabel('Taux de vrais positifs')
plt.title('Courbe ROC')
plt.legend()
plt.show()
