import numpy as np

# Vérifier les dimensions des tableaux
print("Dimensions de real_data.values :", real_data.values.shape)
print("Dimensions de X_generated :", X_generated.shape)

# Si X_generated est en 3D, tu peux le transformer en 2D en supprimant la 3e dimension si nécessaire
if X_generated.ndim == 3:
    X_generated = X_generated.reshape(X_generated.shape[0], -1)

# Si real_data.values est en 3D, la même chose s'applique
if real_data.values.ndim == 3:
    real_data = real_data.values.reshape(real_data.shape[0], -1)

# Sous-échantillonner les données générées si nécessaire
X_generated = X_generated[:real_data.shape[0], :]
y_generated = y_generated[:one_hot_labels.shape[0]]

# Concaténer les données après avoir ajusté la taille
X_augmented = np.vstack([real_data.values, X_generated])  # Concaténation des caractéristiques
y_augmented = np.hstack([one_hot_labels, y_generated])    # Concaténation des labels

# Afficher les dimensions des données après concaténation
print("Dimensions de X_augmented :", X_augmented.shape)
print("Dimensions de y_augmented :", y_augmented.shape)
